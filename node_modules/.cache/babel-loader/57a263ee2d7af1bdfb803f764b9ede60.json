{"ast":null,"code":"import _defineProperty from \"/Users/taras/Desktop/react-foody/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/taras/Desktop/react-foody/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/taras/Desktop/react-foody/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/taras/Desktop/react-foody/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/taras/Desktop/react-foody/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/taras/Desktop/react-foody/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/taras/Desktop/react-foody/src/modules/menu/Comments/CommentEditor.js\";\nimport React, { Component } from 'react';\nimport Styles from './styles.module.css';\n\nvar CommentEditor =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CommentEditor, _Component);\n\n  function CommentEditor() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CommentEditor);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CommentEditor)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      text: ''\n    };\n\n    _this.handleChange = function (_ref) {\n      var target = _ref.target;\n      var name = target.name,\n          value = target.value;\n\n      _this.setState(_defineProperty({}, name, value));\n    };\n\n    _this.handleKeyPress = function (e) {\n      console.log(e.code);\n    };\n\n    _this.handleSubmit = function (e) {\n      e.preventDefault();\n\n      _this.props.onSubmit(_this.state.text); // отправлем значения нашей формы\n\n\n      _this.setState({\n        text: ''\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(CommentEditor, [{\n    key: \"componentDidMount\",\n    // + if ( I need to ckeck on empty value )  dont sent input ??? \n    value: function componentDidMount() {\n      window.addEventListener('keydown', this.handleKeyPress);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var text = this.state.text;\n      return React.createElement(\"form\", {\n        onSubmit: this.handleSubmit,\n        className: Styles.form,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        className: Styles.textarea,\n        placeholder: \" Add Note\",\n        type: \"text\",\n        name: \"text\",\n        value: text,\n        onChange: this.handleChange,\n        autoComplete: \"off\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }), React.createElement(\"button\", {\n        className: Styles.btn,\n        onClick: this.handleKeyPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Sent\"));\n    }\n  }]);\n\n  return CommentEditor;\n}(Component);\n\nexport { CommentEditor as default };\n;","map":{"version":3,"sources":["/Users/taras/Desktop/react-foody/src/modules/menu/Comments/CommentEditor.js"],"names":["React","Component","Styles","CommentEditor","state","text","handleChange","target","name","value","setState","handleKeyPress","e","console","log","code","handleSubmit","preventDefault","props","onSubmit","window","addEventListener","form","textarea","btn"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;;IAGsBC,a;;;;;;;;;;;;;;;;;UACpBC,K,GAAS;AACPC,MAAAA,IAAI,EAAE;AADC,K;;UAITC,Y,GAAe,gBAAgB;AAAA,UAAbC,MAAa,QAAbA,MAAa;AAAA,UACtBC,IADsB,GACPD,MADO,CACtBC,IADsB;AAAA,UAChBC,KADgB,GACPF,MADO,CAChBE,KADgB;;AAE7B,YAAKC,QAAL,qBAAiBF,IAAjB,EAAwBC,KAAxB;AACD,K;;UAODE,c,GAAiB,UAAAC,CAAC,EAAG;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,IAAd;AACH,K;;UAEDC,Y,GAAe,UAAAJ,CAAC,EAAG;AACjBA,MAAAA,CAAC,CAACK,cAAF;;AACA,YAAKC,KAAL,CAAWC,QAAX,CAAoB,MAAKf,KAAL,CAAWC,IAA/B,EAFiB,CAEqB;;;AACtC,YAAKK,QAAL,CAAc;AAAEL,QAAAA,IAAI,EAAE;AAAR,OAAd;AACD,K;;;;;;;AAbD;wCAEoB;AAClBe,MAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,KAAKV,cAAxC;AACD;;;6BAWQ;AAAA,UACCN,IADD,GACU,KAAKD,KADf,CACCC,IADD;AAGP,aACE;AAAM,QAAA,QAAQ,EAAE,KAAKW,YAArB;AAAmC,QAAA,SAAS,EAAEd,MAAM,CAACoB,IAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AACE,QAAA,SAAS,EAAEpB,MAAM,CAACqB,QADpB;AAEE,QAAA,WAAW,EAAC,WAFd;AAGG,QAAA,IAAI,EAAC,MAHR;AAIG,QAAA,IAAI,EAAC,MAJR;AAKG,QAAA,KAAK,EAAGlB,IALX;AAMG,QAAA,QAAQ,EAAK,KAAKC,YANrB;AAOG,QAAA,YAAY,EAAC,KAPhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAUE;AAAQ,QAAA,SAAS,EAAGJ,MAAM,CAACsB,GAA3B;AAAgC,QAAA,OAAO,EAAE,KAAKb,cAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAVF,CADF;AAcD;;;;EA1CyCV,S;;SAAtBE,a;AA2CrB","sourcesContent":["import React, { Component } from 'react';\nimport Styles from './styles.module.css';\n\n\nexport default class  CommentEditor extends Component {\n  state =  {\n    text: '',\n  };\n\n  handleChange = ({ target }) => {\n    const {name, value} = target;\n    this.setState({ [name]: value, })\n  };\n\n  // + if ( I need to ckeck on empty value )  dont sent input ??? \n  \n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyPress)\n  }\n  handleKeyPress = e =>{\n      console.log(e.code)   \n  };\n\n  handleSubmit = e =>{\n    e.preventDefault();\n    this.props.onSubmit(this.state.text); // отправлем значения нашей формы\n    this.setState({ text: '', })\n  };\n\n  render() {\n    const { text } = this.state;\n\n    return (\n      <form onSubmit={this.handleSubmit} className={Styles.form}>\n        <input\n          className={Styles.textarea}\n          placeholder=\" Add Note\"\n           type=\"text\"\n           name=\"text\"\n           value={ text }\n           onChange = { this.handleChange }\n           autoComplete=\"off\"\n        />\n        <button className={ Styles.btn} onClick={this.handleKeyPress}>Sent</button>\n      </form>\n      )\n  }\n};"]},"metadata":{},"sourceType":"module"}